#version 120

attribute vec3 VertexPosition;
attribute vec2 VertexWrap;
attribute vec3 VertexNormal;
attribute vec4 VertexTangent;
/*attribute vec3 VertexBitangent;*/

/*uniform vec3 CameraPosition;*/

varying vec3 Position;
varying vec2 Wrap;
varying vec3 Normal;
varying vec4 Tangent;
varying vec3 Bitangent;

varying vec3 ViewDir;

varying vec3 LightDir;
varying vec3 LightPos;
varying vec3 LightHalfVec;

uniform mat4 ModelViewProjection;
uniform mat4 ModelView;
uniform mat4 View;
uniform mat4 NormalMatrix;

void main(void)
{
    Normal = normalize(NormalMatrix * vec4(VertexNormal,0.0)).xyz;
    /*vec3 N1 = cross(Normal, vec3(0.0, 0.0, 1.0));*/
    /*vec3 N2 = cross(Normal, vec3(0.0, 1.0, 1.0));*/
    /*if(length(N1) > length(N2))*/
    /*    Tangent = N1;*/
    /*else*/
    /*    Tangent = N2;*/
    /*Tangent = normalize(VertexTangent);*/
    Tangent = normalize(NormalMatrix * VertexTangent);
    Bitangent = normalize(cross(Normal, Tangent.xyz));
    
    Position = (ModelView * vec4(VertexPosition, 1.0)).xyz;
    LightPos = (View * vec4(0.0, 0.0, 0, 1.0)).xyz;
    LightDir = normalize(LightPos - vec3(0.0, 0.0, -1.0));
    
    mat3 tspace = mat3(Tangent.xyz,Bitangent,Normal);
    LightDir = tspace * normalize(LightPos - Position);
    ViewDir = tspace * normalize(-Position);

    Wrap = VertexWrap;
    gl_Position = ModelViewProjection * vec4(VertexPosition, 1.0);
}

