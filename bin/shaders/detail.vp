#version 120

attribute vec3 VertexPosition;
attribute vec2 VertexWrap;
attribute vec3 VertexNormal;
attribute vec4 VertexTangent;
/*attribute vec3 VertexBitangent;*/

/*uniform vec3 CameraPosition;*/

varying vec3 PositionT;
varying vec3 Position;
varying vec2 Wrap;
/*varying vec3 Normal;*/
/*varying vec3 Tangent;*/

varying vec3 Eye;
varying vec3 LightPosT;
varying vec3 LightDir;
/*varying vec3 LightHalfVec;*/

uniform mat4 ModelViewProjection;
uniform mat4 ModelView;
uniform mat4 View;
uniform mat4 NormalMatrix;
uniform vec4 LightPos;
uniform float LightDist;

void main(void)
{
    vec3 n = normalize(mat3(NormalMatrix) * VertexNormal);
	vec3 t = normalize(mat3(NormalMatrix) * VertexTangent.xyz);
	vec3 b = cross(n, t);
    mat3 tspace = mat3(t,b,n);
	
    vec4 light = View * LightPos;
	vec3 vVertex = vec3(ModelView * vec4(VertexPosition,1.0));
	LightDir = light.xyz - vVertex;

    LightDir *= tspace;
    Eye = -vVertex;
    Eye *= tspace;
    
    Wrap = VertexWrap;
    gl_Position = ModelViewProjection * vec4(VertexPosition,1.0);
}

